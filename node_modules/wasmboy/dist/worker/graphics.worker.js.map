{"version":3,"file":"graphics.worker.js","sources":["../../lib/worker/util.js","../../lib/worker/workerapi.js","../../lib/worker/smartworker.js","../../lib/worker/constants.js","../../lib/graphics/constants.js","../../lib/graphics/worker/imageData.js","../../lib/graphics/worker/graphics.worker.js"],"sourcesContent":["export function getEventData(event) {\n  if (event.data) {\n    return event.data;\n  }\n\n  return event;\n}\n\nexport const isInBrowser = typeof self !== 'undefined';\n\n// Function to read a base64 string as a buffer\nexport function readBase64String(base64String) {\n  if (isInBrowser) {\n    return base64String;\n  } else {\n    return readBase64Buffer(base64String).toString('utf8');\n  }\n}\n\nexport function readBase64Buffer(base64String) {\n  return Buffer.from(base64String.split(',')[1], 'base64');\n}\n","// Isomorphic worker api to be imported by web workers\n// https://medium.com/dailyjs/threads-in-node-10-5-0-a-practical-intro-3b85a0a3c953\n\n// Initilize some of our isomorphic values\nimport { isInBrowser } from './util';\n\nlet parentPort;\nif (!isInBrowser) {\n  parentPort = require('worker_threads').parentPort;\n}\n\n// https://nodejs.org/api/worker_threads.html#worker_threads_worker_postmessage_value_transferlist\n// https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage\nexport function postMessage(message, transferArray) {\n  // Can't bind parentPort.postMessage, so we need to kinda copy code here :p\n  if (isInBrowser) {\n    self.postMessage(message, transferArray);\n  } else {\n    parentPort.postMessage(message, transferArray);\n  }\n}\n\n// https://nodejs.org/api/worker_threads.html#worker_threads_worker_parentport\n// https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessage\nexport function onMessage(callback, port) {\n  if (!callback) {\n    console.error('workerapi: No callback was provided to onMessage!');\n  }\n\n  // If we passed a port, use that\n  if (port) {\n    if (isInBrowser) {\n      // We are in the browser\n      port.onmessage = callback;\n    } else {\n      // We are in Node\n      port.on('message', callback);\n    }\n    return;\n  }\n\n  if (isInBrowser) {\n    // We are in the browser\n    self.onmessage = callback;\n  } else {\n    // We are in Node\n    parentPort.on('message', callback);\n  }\n}\n","// Smarter workers.\n// Workers with ids, pub sub, etc...\n// https://medium.com/dailyjs/threads-in-node-10-5-0-a-practical-intro-3b85a0a3c953\n\n/*ROLLUP_REPLACE_NODE\nconst { Worker } = require('worker_threads');\nROLLUP_REPLACE_NODE*/\n\nimport { getEventData, readBase64String } from './util';\n\n// Generate ids. Use a counter to help against possible collisions.\nlet idCounter = 0;\nconst generateId = () => {\n  const randomId = Math.random()\n    .toString(36)\n    .replace(/[^a-z]+/g, '')\n    .substr(2, 10);\n  idCounter++;\n  const id = `${randomId}-${idCounter}`;\n  if (idCounter > 100000) {\n    idCounter = 0;\n  }\n  return id;\n};\n\nexport function getSmartWorkerMessage(message, messageId, workerId) {\n  if (!messageId) {\n    messageId = generateId();\n  }\n  return {\n    workerId,\n    messageId,\n    message\n  };\n}\n\nexport class SmartWorker {\n  constructor(workerUrl, id) {\n    this.id = generateId();\n    if (id) {\n      this.id = id;\n    }\n    this.messageListeners = [];\n\n    /*ROLLUP_REPLACE_PROD_BROWSER\n    \n    // Can't load base63 data string directly because safari\n    // https://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string\n\n    let workerJs = atob(workerUrl.split(',')[1]);\n    let blob;\n    try {\n      blob = new Blob([workerJs], {type: 'application/javascript'});\n    } catch (e) {\n      // Legacy\n      window.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder;\n      blob = new BlobBuilder();\n      blob.append(workerJs);\n      blob = blob.getBlob();\n    }\n    this.worker = new Worker(URL.createObjectURL(blob));\n\n\n    this.worker.onmessage = this._onMessageHandler.bind(this);\n    \n    ROLLUP_REPLACE_PROD_BROWSER*/\n\n    /*ROLLUP_REPLACE_DEV_BROWSER\n\n    this.worker = new Worker(workerUrl);\n    this.worker.onmessage = this._onMessageHandler.bind(this);\n\n    ROLLUP_REPLACE_DEV_BROWSER*/\n\n    /*ROLLUP_REPLACE_NODE\n\n    // Split by Comma, to remove the file header from the base 64 string\n    const workerAsString = readBase64String(workerUrl);\n    this.worker = new Worker(workerAsString, {\n      eval: true\n    });\n    this.worker.on('message', this._onMessageHandler.bind(this))\n\n    ROLLUP_REPLACE_NODE*/\n  }\n\n  postMessageIgnoreResponse(message, transfer) {\n    const messageObject = getSmartWorkerMessage(message, undefined, this.id);\n    this.worker.postMessage(messageObject, transfer);\n  }\n\n  postMessage(message, transfer, timeout) {\n    if (!timeout) {\n      timeout = 1000;\n    }\n\n    const messageObject = getSmartWorkerMessage(message, undefined, this.id);\n    const messageId = messageObject.messageId;\n\n    const messageIdListener = new Promise((resolve, reject) => {\n      // Set a timeout before killing the message listener\n      let messageDroppedTimeout = setTimeout(() => {\n        console.warn('Message dropped', message);\n        this.removeMessageListener(messageId);\n        reject();\n      }, timeout);\n\n      // Listen for a message with the same message id to be returned\n      this.addMessageListener((responseMessage, messageListener) => {\n        const eventData = getEventData(responseMessage);\n        if (eventData.messageId === messageId) {\n          clearTimeout(messageDroppedTimeout);\n          messageDroppedTimeout = undefined;\n          this.removeMessageListener(messageListener.id);\n          resolve(eventData);\n        }\n      });\n    });\n\n    this.worker.postMessage(messageObject, transfer);\n\n    return messageIdListener;\n  }\n\n  addMessageListener(callback) {\n    this.messageListeners.push({\n      id: generateId(),\n      callback: callback\n    });\n  }\n\n  removeMessageListener(id) {\n    let messageListenerIndex;\n    this.messageListeners.some((messageListener, index) => {\n      if (messageListener.id === id) {\n        messageListenerIndex = index;\n        return true;\n      }\n\n      return false;\n    });\n\n    if (messageListenerIndex !== undefined) {\n      this.messageListeners.splice(messageListenerIndex, 1);\n    }\n  }\n\n  _onMessageHandler(message) {\n    this.messageListeners.forEach(messageListener => {\n      messageListener.callback(message, messageListener);\n    });\n  }\n}\n","export const WORKER_MESSAGE_TYPE = {\n  CONNECT: 'CONNECT',\n  INSTANTIATE_WASM: 'INSTANTIATE_WASM',\n  CLEAR_MEMORY: 'CLEAR_MEMORY',\n  CLEAR_MEMORY_DONE: 'CLEAR_MEMORY_DONE',\n  GET_MEMORY: 'GET_MEMORY',\n  SET_MEMORY: 'SET_MEMORY',\n  SET_MEMORY_DONE: 'SET_MEMORY_DONE',\n  GET_CONSTANTS: 'GET_CONSTANTS',\n  GET_CONSTANTS_DONE: 'GET_CONSTANTS_DONE',\n  CONFIG: 'CONFIG',\n  RESET_AUDIO_QUEUE: 'RESET_AUDIO_QUEUE',\n  PLAY: 'PLAY',\n  BREAKPOINT: 'BREAKPOINT',\n  PAUSE: 'PAUSE',\n  UPDATED: 'UPDATED',\n  CRASHED: 'CRASHED',\n  SET_JOYPAD_STATE: 'SET_JOYPAD_STATE',\n  AUDIO_LATENCY: 'AUDIO_LATENCY',\n  RUN_WASM_EXPORT: 'RUN_WASM_EXPORT',\n  GET_WASM_MEMORY_SECTION: 'GET_WASM_MEMORY_SECTION',\n  GET_WASM_CONSTANT: 'GET_WASM_CONSTANT',\n  FORCE_OUTPUT_FRAME: 'FORCE_OUTPUT_FRAME',\n  SET_SPEED: 'SET_SPEED',\n  IS_GBC: 'IS_GBC'\n};\n\nexport const WORKER_ID = {\n  LIB: 'LIB',\n  GRAPHICS: 'GRAPHICS',\n  MEMORY: 'MEMORY',\n  CONTROLLER: 'CONTROLLER',\n  AUDIO: 'AUDIO'\n};\n\nexport const MEMORY_TYPE = {\n  BOOT_ROM: 'BOOT_ROM',\n  CARTRIDGE_RAM: 'CARTRIDGE_RAM',\n  CARTRIDGE_ROM: 'CARTRIDGE_ROM',\n  CARTRIDGE_HEADER: 'CARTRIDGE_HEADER',\n  GAMEBOY_MEMORY: 'GAMEBOY_MEMORY',\n  PALETTE_MEMORY: 'PALETTE_MEMORY',\n  INTERNAL_STATE: 'INTERNAL_STATE'\n};\n","// Some shared constants by the graphics lib and worker\n\nexport const GAMEBOY_CAMERA_WIDTH = 160;\nexport const GAMEBOY_CAMERA_HEIGHT = 144;\n","import { GAMEBOY_CAMERA_WIDTH, GAMEBOY_CAMERA_HEIGHT } from '../constants';\n\n// Thanks MaxGraey for the optimization!\n\n// Exporting this function, as we can use it in the benchmarker\nexport function getImageDataFromGraphicsFrameBuffer(wasmByteMemory) {\n  // Draw the pixels\n  // 160x144\n\n  // Split off our image Data\n  // Even though it is not cheap to create buffers,\n  // We need to create this everytime, as it will be transferred back to the\n  // main thread, thus removing this worker / access to this buffer.\n  const imageDataArray = new Uint8ClampedArray(GAMEBOY_CAMERA_HEIGHT * GAMEBOY_CAMERA_WIDTH * 4);\n\n  for (let y = 0; y < GAMEBOY_CAMERA_HEIGHT; ++y) {\n    let stride1 = y * (GAMEBOY_CAMERA_WIDTH * 3);\n    let stride2 = y * (GAMEBOY_CAMERA_WIDTH * 4);\n    for (let x = 0; x < GAMEBOY_CAMERA_WIDTH; ++x) {\n      // Each color has an R G B component\n      const pixelStart = stride1 + x * 3;\n\n      const imageDataIndex = stride2 + (x << 2);\n\n      imageDataArray[imageDataIndex + 0] = wasmByteMemory[pixelStart + 0];\n      imageDataArray[imageDataIndex + 1] = wasmByteMemory[pixelStart + 1];\n      imageDataArray[imageDataIndex + 2] = wasmByteMemory[pixelStart + 2];\n\n      // Alpha, no transparency\n      imageDataArray[imageDataIndex + 3] = 255;\n    }\n  }\n  return imageDataArray;\n}\n","// Web worker for wasmboy lib\n// Will be used for running wasm, and controlling child workers.\n\nimport { postMessage, onMessage } from '../../worker/workerapi';\nimport { getEventData } from '../../worker/util';\nimport { getSmartWorkerMessage } from '../../worker/smartworker';\nimport { WORKER_MESSAGE_TYPE } from '../../worker/constants';\n\nimport { getImageDataFromGraphicsFrameBuffer } from './imageData';\n\n// Worker port for the lib\nlet libWorkerPort;\n\nconst libMessageHandler = event => {\n  const eventData = getEventData(event);\n\n  // Handle our messages from the lib thread\n  switch (eventData.message.type) {\n    case WORKER_MESSAGE_TYPE.GET_CONSTANTS_DONE: {\n      postMessage(getSmartWorkerMessage(eventData.message, eventData.messageId));\n      return;\n    }\n\n    case WORKER_MESSAGE_TYPE.UPDATED: {\n      // Process the memory buffer and pass back to the main thread\n      const imageDataArray = getImageDataFromGraphicsFrameBuffer(new Uint8ClampedArray(eventData.message.graphicsFrameBuffer));\n      postMessage(\n        getSmartWorkerMessage({\n          type: WORKER_MESSAGE_TYPE.UPDATED,\n          imageDataArrayBuffer: imageDataArray.buffer\n        }),\n        [imageDataArray.buffer]\n      );\n      return;\n    }\n  }\n};\n\nconst messageHandler = event => {\n  // Handle our messages from the main thread\n  const eventData = getEventData(event);\n  switch (eventData.message.type) {\n    case WORKER_MESSAGE_TYPE.CONNECT: {\n      // Set our lib port\n      libWorkerPort = eventData.message.ports[0];\n      onMessage(libMessageHandler, libWorkerPort);\n\n      // Simply post back that we are ready\n      postMessage(getSmartWorkerMessage(undefined, eventData.messageId));\n      return;\n    }\n\n    case WORKER_MESSAGE_TYPE.GET_CONSTANTS: {\n      // Forward to our lib worker\n      libWorkerPort.postMessage(\n        getSmartWorkerMessage(\n          {\n            type: WORKER_MESSAGE_TYPE.GET_CONSTANTS\n          },\n          eventData.messageId\n        )\n      );\n      return;\n    }\n\n    default: {\n      //handle other messages from main\n      console.log(eventData);\n    }\n  }\n};\n\nonMessage(messageHandler);\n"],"names":["getEventData","event","data","isInBrowser","self","parentPort","require","postMessage","message","transferArray","onMessage","callback","port","console","error","onmessage","on","idCounter","generateId","randomId","Math","random","toString","replace","substr","id","getSmartWorkerMessage","messageId","workerId","WORKER_MESSAGE_TYPE","CONNECT","INSTANTIATE_WASM","CLEAR_MEMORY","CLEAR_MEMORY_DONE","GET_MEMORY","SET_MEMORY","SET_MEMORY_DONE","GET_CONSTANTS","GET_CONSTANTS_DONE","CONFIG","RESET_AUDIO_QUEUE","PLAY","BREAKPOINT","PAUSE","UPDATED","CRASHED","SET_JOYPAD_STATE","AUDIO_LATENCY","RUN_WASM_EXPORT","GET_WASM_MEMORY_SECTION","GET_WASM_CONSTANT","FORCE_OUTPUT_FRAME","SET_SPEED","IS_GBC","GAMEBOY_CAMERA_WIDTH","GAMEBOY_CAMERA_HEIGHT","getImageDataFromGraphicsFrameBuffer","wasmByteMemory","imageDataArray","Uint8ClampedArray","y","stride1","stride2","x","pixelStart","imageDataIndex","libWorkerPort","libMessageHandler","eventData","type","graphicsFrameBuffer","imageDataArrayBuffer","buffer","messageHandler","ports","undefined","log"],"mappings":"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"}