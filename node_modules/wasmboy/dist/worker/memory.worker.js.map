{"version":3,"file":"memory.worker.js","sources":["../../lib/worker/util.js","../../lib/worker/workerapi.js","../../lib/worker/smartworker.js","../../lib/worker/constants.js","../../lib/memory/worker/memory.worker.js"],"sourcesContent":["export function getEventData(event) {\n  if (event.data) {\n    return event.data;\n  }\n\n  return event;\n}\n\nexport const isInBrowser = typeof self !== 'undefined';\n\n// Function to read a base64 string as a buffer\nexport function readBase64String(base64String) {\n  if (isInBrowser) {\n    return base64String;\n  } else {\n    return readBase64Buffer(base64String).toString('utf8');\n  }\n}\n\nexport function readBase64Buffer(base64String) {\n  return Buffer.from(base64String.split(',')[1], 'base64');\n}\n","// Isomorphic worker api to be imported by web workers\n// https://medium.com/dailyjs/threads-in-node-10-5-0-a-practical-intro-3b85a0a3c953\n\n// Initilize some of our isomorphic values\nimport { isInBrowser } from './util';\n\nlet parentPort;\nif (!isInBrowser) {\n  parentPort = require('worker_threads').parentPort;\n}\n\n// https://nodejs.org/api/worker_threads.html#worker_threads_worker_postmessage_value_transferlist\n// https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage\nexport function postMessage(message, transferArray) {\n  // Can't bind parentPort.postMessage, so we need to kinda copy code here :p\n  if (isInBrowser) {\n    self.postMessage(message, transferArray);\n  } else {\n    parentPort.postMessage(message, transferArray);\n  }\n}\n\n// https://nodejs.org/api/worker_threads.html#worker_threads_worker_parentport\n// https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessage\nexport function onMessage(callback, port) {\n  if (!callback) {\n    console.error('workerapi: No callback was provided to onMessage!');\n  }\n\n  // If we passed a port, use that\n  if (port) {\n    if (isInBrowser) {\n      // We are in the browser\n      port.onmessage = callback;\n    } else {\n      // We are in Node\n      port.on('message', callback);\n    }\n    return;\n  }\n\n  if (isInBrowser) {\n    // We are in the browser\n    self.onmessage = callback;\n  } else {\n    // We are in Node\n    parentPort.on('message', callback);\n  }\n}\n","// Smarter workers.\n// Workers with ids, pub sub, etc...\n// https://medium.com/dailyjs/threads-in-node-10-5-0-a-practical-intro-3b85a0a3c953\n\n/*ROLLUP_REPLACE_NODE\nconst { Worker } = require('worker_threads');\nROLLUP_REPLACE_NODE*/\n\nimport { getEventData, readBase64String } from './util';\n\n// Generate ids. Use a counter to help against possible collisions.\nlet idCounter = 0;\nconst generateId = () => {\n  const randomId = Math.random()\n    .toString(36)\n    .replace(/[^a-z]+/g, '')\n    .substr(2, 10);\n  idCounter++;\n  const id = `${randomId}-${idCounter}`;\n  if (idCounter > 100000) {\n    idCounter = 0;\n  }\n  return id;\n};\n\nexport function getSmartWorkerMessage(message, messageId, workerId) {\n  if (!messageId) {\n    messageId = generateId();\n  }\n  return {\n    workerId,\n    messageId,\n    message\n  };\n}\n\nexport class SmartWorker {\n  constructor(workerUrl, id) {\n    this.id = generateId();\n    if (id) {\n      this.id = id;\n    }\n    this.messageListeners = [];\n\n    /*ROLLUP_REPLACE_PROD_BROWSER\n    \n    // Can't load base63 data string directly because safari\n    // https://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string\n\n    let workerJs = atob(workerUrl.split(',')[1]);\n    let blob;\n    try {\n      blob = new Blob([workerJs], {type: 'application/javascript'});\n    } catch (e) {\n      // Legacy\n      window.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder;\n      blob = new BlobBuilder();\n      blob.append(workerJs);\n      blob = blob.getBlob();\n    }\n    this.worker = new Worker(URL.createObjectURL(blob));\n\n\n    this.worker.onmessage = this._onMessageHandler.bind(this);\n    \n    ROLLUP_REPLACE_PROD_BROWSER*/\n\n    /*ROLLUP_REPLACE_DEV_BROWSER\n\n    this.worker = new Worker(workerUrl);\n    this.worker.onmessage = this._onMessageHandler.bind(this);\n\n    ROLLUP_REPLACE_DEV_BROWSER*/\n\n    /*ROLLUP_REPLACE_NODE\n\n    // Split by Comma, to remove the file header from the base 64 string\n    const workerAsString = readBase64String(workerUrl);\n    this.worker = new Worker(workerAsString, {\n      eval: true\n    });\n    this.worker.on('message', this._onMessageHandler.bind(this))\n\n    ROLLUP_REPLACE_NODE*/\n  }\n\n  postMessageIgnoreResponse(message, transfer) {\n    const messageObject = getSmartWorkerMessage(message, undefined, this.id);\n    this.worker.postMessage(messageObject, transfer);\n  }\n\n  postMessage(message, transfer, timeout) {\n    if (!timeout) {\n      timeout = 1000;\n    }\n\n    const messageObject = getSmartWorkerMessage(message, undefined, this.id);\n    const messageId = messageObject.messageId;\n\n    const messageIdListener = new Promise((resolve, reject) => {\n      // Set a timeout before killing the message listener\n      let messageDroppedTimeout = setTimeout(() => {\n        console.warn('Message dropped', message);\n        this.removeMessageListener(messageId);\n        reject();\n      }, timeout);\n\n      // Listen for a message with the same message id to be returned\n      this.addMessageListener((responseMessage, messageListener) => {\n        const eventData = getEventData(responseMessage);\n        if (eventData.messageId === messageId) {\n          clearTimeout(messageDroppedTimeout);\n          messageDroppedTimeout = undefined;\n          this.removeMessageListener(messageListener.id);\n          resolve(eventData);\n        }\n      });\n    });\n\n    this.worker.postMessage(messageObject, transfer);\n\n    return messageIdListener;\n  }\n\n  addMessageListener(callback) {\n    this.messageListeners.push({\n      id: generateId(),\n      callback: callback\n    });\n  }\n\n  removeMessageListener(id) {\n    let messageListenerIndex;\n    this.messageListeners.some((messageListener, index) => {\n      if (messageListener.id === id) {\n        messageListenerIndex = index;\n        return true;\n      }\n\n      return false;\n    });\n\n    if (messageListenerIndex !== undefined) {\n      this.messageListeners.splice(messageListenerIndex, 1);\n    }\n  }\n\n  _onMessageHandler(message) {\n    this.messageListeners.forEach(messageListener => {\n      messageListener.callback(message, messageListener);\n    });\n  }\n}\n","export const WORKER_MESSAGE_TYPE = {\n  CONNECT: 'CONNECT',\n  INSTANTIATE_WASM: 'INSTANTIATE_WASM',\n  CLEAR_MEMORY: 'CLEAR_MEMORY',\n  CLEAR_MEMORY_DONE: 'CLEAR_MEMORY_DONE',\n  GET_MEMORY: 'GET_MEMORY',\n  SET_MEMORY: 'SET_MEMORY',\n  SET_MEMORY_DONE: 'SET_MEMORY_DONE',\n  GET_CONSTANTS: 'GET_CONSTANTS',\n  GET_CONSTANTS_DONE: 'GET_CONSTANTS_DONE',\n  CONFIG: 'CONFIG',\n  RESET_AUDIO_QUEUE: 'RESET_AUDIO_QUEUE',\n  PLAY: 'PLAY',\n  BREAKPOINT: 'BREAKPOINT',\n  PAUSE: 'PAUSE',\n  UPDATED: 'UPDATED',\n  CRASHED: 'CRASHED',\n  SET_JOYPAD_STATE: 'SET_JOYPAD_STATE',\n  AUDIO_LATENCY: 'AUDIO_LATENCY',\n  RUN_WASM_EXPORT: 'RUN_WASM_EXPORT',\n  GET_WASM_MEMORY_SECTION: 'GET_WASM_MEMORY_SECTION',\n  GET_WASM_CONSTANT: 'GET_WASM_CONSTANT',\n  FORCE_OUTPUT_FRAME: 'FORCE_OUTPUT_FRAME',\n  SET_SPEED: 'SET_SPEED',\n  IS_GBC: 'IS_GBC'\n};\n\nexport const WORKER_ID = {\n  LIB: 'LIB',\n  GRAPHICS: 'GRAPHICS',\n  MEMORY: 'MEMORY',\n  CONTROLLER: 'CONTROLLER',\n  AUDIO: 'AUDIO'\n};\n\nexport const MEMORY_TYPE = {\n  BOOT_ROM: 'BOOT_ROM',\n  CARTRIDGE_RAM: 'CARTRIDGE_RAM',\n  CARTRIDGE_ROM: 'CARTRIDGE_ROM',\n  CARTRIDGE_HEADER: 'CARTRIDGE_HEADER',\n  GAMEBOY_MEMORY: 'GAMEBOY_MEMORY',\n  PALETTE_MEMORY: 'PALETTE_MEMORY',\n  INTERNAL_STATE: 'INTERNAL_STATE'\n};\n","// Web worker for wasmboy lib\n// Will be used for running wasm, and controlling child workers.\n\nimport { postMessage, onMessage } from '../../worker/workerapi';\nimport { getEventData } from '../../worker/util';\nimport { getSmartWorkerMessage } from '../../worker/smartworker';\nimport { WORKER_MESSAGE_TYPE } from '../../worker/constants';\n\n// Worker port for the lib\nlet libWorkerPort;\n\n// Function to pass memory to parent thread as transferable\nconst passMemoryToConnectedThread = (isForLib, eventData) => {\n  const transferableMemory = [];\n  Object.keys(eventData.message).forEach(key => {\n    if (key !== 'type') {\n      transferableMemory.push(eventData.message[key]);\n    }\n  });\n\n  // Forward to our lib worker\n  const workerMessage = getSmartWorkerMessage(eventData.message, eventData.messageId);\n\n  if (isForLib) {\n    libWorkerPort.postMessage(workerMessage, transferableMemory);\n  } else {\n    postMessage(workerMessage, transferableMemory);\n  }\n};\n\nconst libMessageHandler = event => {\n  // Handle our messages from the lib thread\n  const eventData = getEventData(event);\n\n  // Handle update method transfrables\n  if (!eventData.message) {\n    return;\n  }\n\n  // Handle our messages from the lib thread\n  switch (eventData.message.type) {\n    case WORKER_MESSAGE_TYPE.CLEAR_MEMORY_DONE: {\n      postMessage(getSmartWorkerMessage(eventData.message, eventData.messageId), [eventData.message.wasmByteMemory]);\n      return;\n    }\n    case WORKER_MESSAGE_TYPE.GET_CONSTANTS_DONE: {\n      postMessage(getSmartWorkerMessage(eventData.message, eventData.messageId));\n      return;\n    }\n    case WORKER_MESSAGE_TYPE.SET_MEMORY_DONE: {\n      postMessage(getSmartWorkerMessage(eventData.message, eventData.messageId));\n      return;\n    }\n    case WORKER_MESSAGE_TYPE.GET_MEMORY: {\n      passMemoryToConnectedThread(false, eventData);\n      return;\n    }\n    case WORKER_MESSAGE_TYPE.UPDATED: {\n      passMemoryToConnectedThread(false, eventData);\n      return;\n    }\n  }\n};\n\nconst messageHandler = event => {\n  // Handle our messages from the main thread\n  const eventData = getEventData(event);\n\n  switch (eventData.message.type) {\n    case WORKER_MESSAGE_TYPE.CONNECT: {\n      // Set our lib port\n      libWorkerPort = eventData.message.ports[0];\n      onMessage(libMessageHandler, libWorkerPort);\n\n      // Simply post back that we are ready\n      postMessage(getSmartWorkerMessage(undefined, eventData.messageId));\n      return;\n    }\n\n    case WORKER_MESSAGE_TYPE.CLEAR_MEMORY: {\n      // Forward to our lib worker\n      libWorkerPort.postMessage(\n        getSmartWorkerMessage(\n          {\n            type: WORKER_MESSAGE_TYPE.CLEAR_MEMORY\n          },\n          eventData.messageId\n        )\n      );\n      return;\n    }\n\n    case WORKER_MESSAGE_TYPE.GET_CONSTANTS: {\n      // Forward to our lib worker\n      libWorkerPort.postMessage(\n        getSmartWorkerMessage(\n          {\n            type: WORKER_MESSAGE_TYPE.GET_CONSTANTS\n          },\n          eventData.messageId\n        )\n      );\n      return;\n    }\n\n    case WORKER_MESSAGE_TYPE.GET_MEMORY: {\n      // Forward to our lib worker\n      libWorkerPort.postMessage(getSmartWorkerMessage(eventData.message, eventData.messageId));\n      return;\n    }\n\n    case WORKER_MESSAGE_TYPE.SET_MEMORY: {\n      passMemoryToConnectedThread(true, eventData);\n      return;\n    }\n\n    default: {\n      //handle other messages from main\n      console.log(eventData);\n    }\n  }\n};\n\nonMessage(messageHandler);\n"],"names":["getEventData","event","data","isInBrowser","self","parentPort","require","postMessage","message","transferArray","onMessage","callback","port","console","error","onmessage","on","idCounter","generateId","randomId","Math","random","toString","replace","substr","id","getSmartWorkerMessage","messageId","workerId","WORKER_MESSAGE_TYPE","CONNECT","INSTANTIATE_WASM","CLEAR_MEMORY","CLEAR_MEMORY_DONE","GET_MEMORY","SET_MEMORY","SET_MEMORY_DONE","GET_CONSTANTS","GET_CONSTANTS_DONE","CONFIG","RESET_AUDIO_QUEUE","PLAY","BREAKPOINT","PAUSE","UPDATED","CRASHED","SET_JOYPAD_STATE","AUDIO_LATENCY","RUN_WASM_EXPORT","GET_WASM_MEMORY_SECTION","GET_WASM_CONSTANT","FORCE_OUTPUT_FRAME","SET_SPEED","IS_GBC","libWorkerPort","passMemoryToConnectedThread","isForLib","eventData","transferableMemory","Object","keys","forEach","key","push","workerMessage","libMessageHandler","type","wasmByteMemory","messageHandler","ports","undefined","log"],"mappings":"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"}